start ::= (open | fdef | sigma)* EOF
;

id ::= [a-zA-Z_][a-zA-Z0-9_]*
;

pid ::= [A-Z_][a-zA-Z0-9_]*
;

sp ::= [ \n\t\r]*
;

string ::= '"' (~'"' sigma)* '"'
;

fdef_pref ::= (EOF | '\n') "let"
;

fdef_sigma ::= ~fdef_pref sigma
;

fdecl ::= "let" (some | ~'=' sigma)* '='
;

some ::=  '?' sp '(' (~')' sigma)* ')'
;

comment ::= "(*" (~"*)" sigma)* "*)"; 

open ::= (EOF | '\n') "open" sp <open> id </open>
;

fdef ::= (EOF | '\n') <fdef>  fdecl (try_symbol | fdef_sigma)* </fdef>
;

try_symbol ::= 
	fdecl
	| comment
	| string
	| <package> <pname> pid </pname> '.' id </package>
	| <symbol> id </symbol>
;
